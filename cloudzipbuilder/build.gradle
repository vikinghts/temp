apply plugin:'base'

// override to print the commands being executed
allprojects {
  tasks.withType(Exec) {
    doFirst {
        String cmdPrint = commandLine
        println 'Command to run:' + cmdPrint.replace(',','')
    }
  }
}

ext {
    cvsRevision = 'B_7'
    cloudZipVersion = "15.4.0"	
    majrel = '7'
    minrel = '4' 
    micrel = '0' 
    pssFrameworkVersion = "7.0.4"
    commitMessage = 'Making new release of cloudZip for version $cloudZipVersion pssFrameworkVersion ${propertiesFrameworkVersion} and ${majrel}.${minrel}.${micrel}'
    osName = System.properties['os.name']
	if (osName.startsWith("Window")) {
   		 antLocation = ${projectDir}/'build/ant/bin/ant.bat'
	} else {
   		 antLocation = 'ant'
	}
}

defaultTasks 'buildCloudZip'

task createBuildDir(){
	buildDir.mkdir()
}

task cvsCheckoutLatestPSSM_PCC_SHARED(type: Exec,dependsOn: 'createBuildDir') {
	doFirst{
		logger.quiet('cvs checkout PSSM_PCC_SHARED might fail. Check username password right version of cvs etc')
	}
	description 'CVS (checkout) checkoutLatest PSSM_PCC_SHARED (non standard....FIXME)'
	workingDir 'build'
	commandLine 'cvs', 'checkout', '-r' , cvsRevision , '-d' , 'PSSM_PCC_Shared' , 'PSSM_PCC_Shared'
	environment ('CVSROOT',':pserver:kbjans:kbjans@nl-devtux02.planon-fm.com:/data/repository/cvs-repo')
}

task bootStrapEnviroment(type:Exec, dependsOn: 'cvsCheckoutLatestPSSM_PCC_SHARED') {
	description 'BootStrapEnviroment in PSSM_PCC_Shared' 
	workingDir 'build/PSSM_PCC_Shared'  			 
	if (osName.startsWith("Window")) {
		commandLine 'cmd' ,'/c', 'SFProjectBootstrap.bat'
	} else {
		commandLine 'echo' ,'"/c SFProjectBootstrap.bat"'
	}
}

task prepareWorkSpace(type: Exec,dependsOn: 'bootStrapEnviroment') {
	description 'ant prepareWorkspace' 
	workingDir 'build/PSSM_PCC_Shared'
	commandLine "${antLocation}" , 'prepareWorkspace'
}

task removeTempBootStrapCheckout(type: Delete, dependsOn: 'prepareWorkSpace') {
	delete 'build/PSSM_PCC_Shared'
}

task checkoutLatest(dependsOn: ['checkoutLatestPSSM_PCC_Shared','checkoutLatestPSSM_PCC_Account','checkoutLatestPSSM_PCC_Environment','checkoutLatestSDK_PCC_PCIS_Service','checkoutLatestSDK_PCC_PCIS_Client','checkoutLatestPCC_Cockpit']) {
}

task checkoutLatestPSSM_PCC_Shared(type: Exec,dependsOn: 'removeTempBootStrapCheckout') { 
	description 'Clone(checkout) checkoutLatest PSSM_PCC_Shared'
	def folder = new File( 'build/PSSM_PCC_Shared' )
	if( !folder.exists() ) {
    		commandLine 'git', 'clone', 'git@github.com:planonsoftware/PSSM_PCC_Shared.git' , 'build/PSSM_PCC_Shared' 
	} else {
    		commandLine 'git', 'pull' 
	}
}

task checkoutLatestPSSM_PCC_Account(type: Exec,dependsOn: 'removeTempBootStrapCheckout') {
	description 'Clone(checkout) checkoutLatest PSSM_PCC_Account'
	def folder = new File( 'build/PSSM_PCC_Account' )
	if( !folder.exists() ) {
		commandLine 'git', 'clone', 'git@github.com:planonsoftware/PSSM_PCC_Account.git' , 'build/PSSM_PCC_Account' 
	} else {
    		commandLine 'git', 'pull' 
	}
}

task checkoutLatestPSSM_PCC_Environment(type: Exec,dependsOn: 'removeTempBootStrapCheckout') {
	description 'Clone(checkout) checkoutLatest PSSM_PCC_Environment'
	def folder = new File( 'build/PSSM_PCC_Environment' )
	if( !folder.exists() ) {
		commandLine 'git', 'clone', 'git@github.com:planonsoftware/PSSM_PCC_Environment.git' , 'build/PSSM_PCC_Environment' 
	} else {
    		commandLine 'git', 'pull' 
	}
}

task checkoutLatestSDK_PCC_PCIS_Service(type: Exec,dependsOn: 'removeTempBootStrapCheckout') {
	description 'Clone(checkout) checkoutLatest SDK_PCC_PCIS_Service'
	def folder = new File( 'build/SDK_PCC_PCIS_Service' )
	if( !folder.exists() ) {
		commandLine 'git', 'clone', 'git@github.com:planonsoftware/SDK_PCC_PCIS_Service.git' , 'build/SDK_PCC_PCIS_Service' 
	} else {
    		commandLine 'git', 'pull' 
	}
}

task checkoutLatestSDK_PCC_PCIS_Client(type: Exec,dependsOn: 'removeTempBootStrapCheckout') {
	description 'Clone(checkout) checkoutLatest SDK_PCC_PCIS_Client'
	def folder = new File( 'build/SDK_PCC_PCIS_Client' )
	if( !folder.exists() ) {
		commandLine 'git', 'clone', 'git@github.com:planonsoftware/SDK_PCC_PCIS_Client.git' , 'build/SDK_PCC_PCIS_Client' 
	} else {
    		commandLine 'git', 'pull' 
	}
}

task checkoutLatestPCC_Cockpit(type: Exec,dependsOn: 'removeTempBootStrapCheckout') {
	description 'Clone(checkout) checkoutLatest PCC_Cockpit'
	def folder = new File( 'build/PCC_Cockpit' )
	if( !folder.exists() ) {
		commandLine 'git', 'clone', 'git@github.com:planonsoftware/PCC_Cockpit.git' , 'build/PCC_Cockpit' 
	} else {
    		commandLine 'git', 'pull' 
	}
}

task updateVersion(dependsOn: ['updateMainVersion','updateVersionPSSM_PCC_Account','updateVersionPSSM_PCC_Environment','updateVersionPSSM_PCC_Shared','updateVersionPssFramework']){
}

task updateVersionPssFramework(dependsOn: ['updatePssFrameworkVersionPSSM_PCC_Environment','updatePssFrameworkVersionPSSM_PCC_Shared','updatePssFrameworkVersionPSSM_PCC_Account']) {
}

task updateMainVersion(dependsOn: 'checkoutLatest') {
    description 'Updating version number in PSSM_PCC_Shared for cloudZip to version : '+ cloudZipVersion
    doFirst {
    	logger.quiet('Updating version number in PSSM_PCC_Account for cloudZip to version : '+cloudZipVersion)
	    def versionFile = new File('build/PSSM_PCC_Shared/eclipse.project.properties')
	    String versionFileContents = versionFile.getText('UTF-8')
	    versionFileContents = versionFileContents.replaceAll(/publish\.zip\.version=(\d+).(\d+).(\d+)/,"publish.zip.version=${cloudZipVersion}")
	    versionFile.write(versionFileContents)
    }
}

task updateVersionPSSM_PCC_Account(dependsOn: 'checkoutLatest') {
    description 'Updating Maj min mic version number in PSSM_PCC_Account for cloudZip to version : ' + majrel + '.' + minrel + '.' + micrel 
    doFirst {
    	logger.quiet('Updating Maj min mic version number in PSSM_PCC_Account for cloudZip to version : ' + majrel + '.' + minrel + '.' + micrel)
	    def versionFile = new File('build/PSSM_PCC_Account/eclipse.project.properties')
	    String versionFileContents = versionFile.getText('UTF-8')
	    versionFileContents = versionFileContents.replaceAll(/artifact\.version\.majrel=(\d+)/,"artifact.version.majrel=${majrel}")
	    versionFileContents = versionFileContents.replaceAll(/artifact\.version\.minrel=(\d+)/,"artifact.version.minrel=${minrel}")
	    versionFileContents = versionFileContents.replaceAll(/artifact\.version\.micrel=(\d+)/,"artifact.version.micrel=${micrel}")
	    versionFile.write(versionFileContents)
    }
}

task updateVersionPSSM_PCC_Environment(dependsOn: 'checkoutLatest') {
	description 'Updating Maj min mic version number in PSSM_PCC_Environment for cloudZip to version : ' + majrel + '.' + minrel + '.' + micrel
    doFirst {
    	logger.quiet('Updating Maj min mic version number in PSSM_PCC_Environment for cloudZip to version : ' + majrel + '.' + minrel + '.' + micrel)
	    def versionFile = new File('build/PSSM_PCC_Environment/eclipse.project.properties')
	    String versionFileContents = versionFile.getText('UTF-8')
	    versionFileContents = versionFileContents.replaceAll(/artifact\.version\.majrel=(\d+)/,"artifact.version.majrel=${majrel}")
	    versionFileContents = versionFileContents.replaceAll(/artifact\.version\.minrel=(\d+)/,"artifact.version.minrel=${minrel}")
	    versionFileContents = versionFileContents.replaceAll(/artifact\.version\.micrel=(\d+)/,"artifact.version.micrel=${micrel}")
	    versionFile.write(versionFileContents)
    }
}

task updateVersionPSSM_PCC_Shared(dependsOn: 'checkoutLatest') {
	description 'Updating Maj min mic version number in PSSM_PCC_Shared for cloudZip to version : ' + majrel + '.' + minrel + '.' + micrel
    doFirst {
    	logger.quiet('Updating Maj min mic version number in PSSM_PCC_Shared for cloudZip to version : ' + majrel + '.' + minrel + '.' + micrel)
	    def versionFile = new File('build/PSSM_PCC_Shared/eclipse.project.properties')
	    String versionFileContents = versionFile.getText('UTF-8')
	    versionFileContents = versionFileContents.replaceAll(/artifact\.version\.majrel=(\d+)/,"artifact.version.majrel=${majrel}")
	    versionFileContents = versionFileContents.replaceAll(/artifact\.version\.minrel=(\d+)/,"artifact.version.minrel=${minrel}")
	    versionFileContents = versionFileContents.replaceAll(/artifact\.version\.micrel=(\d+)/,"artifact.version.micrel=${micrel}")
	    versionFile.write(versionFileContents)
    }
}

task updatePssFrameworkVersionPSSM_PCC_Environment(dependsOn: 'checkoutLatest') {
    description 'Updating version pss-framework number in PSSM_PCC_Environment for cloudZip to version : '+ pssFrameworkVersion
    doFirst {
    	logger.quiet('Updating version pss-framework number in PSSM_PCC_Environment for cloudZip to version : '+ pssFrameworkVersion)
	    def versionFile = new File('build/PSSM_PCC_Environment/ivy.xml')
	    String versionFileContents = versionFile.getText('UTF-8')
	    versionFileContents = versionFileContents.replaceAll(/pss\.framework\" rev=\"(\d+).(\d+).(\d+)\"/,"pss.framework\" rev=\"${pssFrameworkVersion}\"")
	    versionFile.write(versionFileContents)
    }
}

task updatePssFrameworkVersionPSSM_PCC_Shared(dependsOn: 'checkoutLatest') {
    description 'Updating version pss-framework number in PSSM_PCC_Shared for cloudZip to version : '+ pssFrameworkVersion
    doFirst {
    	logger.quiet('Updating version pss-framework number in PSSM_PCC_Shared for cloudZip to version : '+ pssFrameworkVersion)
	    def versionFile = new File('build/PSSM_PCC_Shared/ivy.xml')
	    String versionFileContents = versionFile.getText('UTF-8')
	    versionFileContents = versionFileContents.replaceAll(/pss\.framework\" rev=\"(\d+).(\d+).(\d+)\"/,"pss.framework\" rev=\"${pssFrameworkVersion}\"")
	    versionFile.write(versionFileContents)
    }
}

task updatePssFrameworkVersionPSSM_PCC_Account(dependsOn: 'checkoutLatest') {
    description 'Updating version pss-framework number in PSSM_PCC_Account for cloudZip to version : '+ pssFrameworkVersion
    doFirst {
    	logger.quiet('Updating version pss-framework number in PSSM_PCC_Account for cloudZip to version : '+ pssFrameworkVersion)
	    def versionFile = new File('build/PSSM_PCC_Account/ivy.xml')
	    String versionFileContents = versionFile.getText('UTF-8')
	    versionFileContents = versionFileContents.replaceAll(/pss\.framework\" rev=\"(\d+).(\d+).(\d+)\"/,"pss.framework\" rev=\"${pssFrameworkVersion}\"")
	    versionFile.write(versionFileContents)
    }
}


task eclipsify(dependsOn: ['eclipsifyPSSM_PCC_Shared','eclipsifyPSSM_PCC_Account','eclipsifyPSSM_PCC_Environment','eclipsifySDK_PCC_PCIS_Service','eclipsifySDK_PCC_PCIS_Client','eclipsifyCockpitClient','eclipsifySharedResourcesCockpit']){}

task fixPropertiesPSSM_PCC_Shared(type: Copy,dependsOn: 'updateVersion') {							
    from('build/PSSM_PCC_Shared')
    into('build/PSSM_PCC_Shared')
    include 'eclipse.project.properties'
    rename ('eclipse.project.properties','project.properties')
}

task eclipsifyPSSM_PCC_Shared(type: Exec, dependsOn: 'fixPropertiesPSSM_PCC_Shared') {
	description 'ant eclipsify local PSSM_PCC_Shared' 
    workingDir 'build/PSSM_PCC_Shared'
    commandLine "${antLocation}" , 'eclipse'
}

task fixPropertiesPSSM_PCC_Account(type: Copy,dependsOn: 'updateVersion') {							
    from('build/PSSM_PCC_Account')
    into('build/PSSM_PCC_Account')
    include 'eclipse.project.properties'
    rename ('eclipse.project.properties','project.properties')
}

task eclipsifyPSSM_PCC_Account(type: Exec, dependsOn: 'fixPropertiesPSSM_PCC_Account') {
	description 'ant eclipsify local PSSM_PCC_Account' 
    workingDir 'build/PSSM_PCC_Account'
    commandLine "${antLocation}" , 'eclipse'
}

task fixPropertiesPSSM_PCC_Environment(type: Copy,dependsOn: 'updateVersion') {							
    from('build/PSSM_PCC_Environment')
    into('build/PSSM_PCC_Environment')
    include 'eclipse.project.properties'
    rename ('eclipse.project.properties','project.properties')
}

task eclipsifyPSSM_PCC_Environment(type: Exec, dependsOn: 'fixPropertiesPSSM_PCC_Environment') {
	description 'ant eclipsify local PSSM_PCC_Environment' 
    workingDir 'build/PSSM_PCC_Environment'
    commandLine "${antLocation}" , 'eclipse'
}

task fixPropertiesSDK_PCC_PCIS_Service(type: Copy,dependsOn: 'updateVersion') {							
    from('build/SDK_PCC_PCIS_Service')
    into('build/SDK_PCC_PCIS_Service')
    include 'eclipse.project.properties'
    rename ('eclipse.project.properties','project.properties')
}

task eclipsifySDK_PCC_PCIS_Service(type: Exec, dependsOn: 'fixPropertiesSDK_PCC_PCIS_Service') {
	description 'ant eclipsify local SDK_PCC_PCIS_Service' 
    workingDir 'build/SDK_PCC_PCIS_Service'
    commandLine "${antLocation}" , 'eclipse'
}

task fixPropertiesSDK_PCC_PCIS_Client(type: Copy,dependsOn: 'updateVersion') {							
    from('build/SDK_PCC_PCIS_Client')
    into('build/SDK_PCC_PCIS_Client')
    include 'eclipse.project.properties'
    rename ('eclipse.project.properties','project.properties')
}

task eclipsifySDK_PCC_PCIS_Client(type: Exec, dependsOn: 'fixPropertiesSDK_PCC_PCIS_Client') {
	description 'ant eclipsify local SDK_PCC_PCIS_Client' 
    workingDir 'build/SDK_PCC_PCIS_Client'
    commandLine "${antLocation}" , 'eclipse'
}

task fixPropertiesCockpitClient(type: Copy,dependsOn: 'updateVersion') {							
    from('build/PCC_Cockpit/CockpitClient')
    into('build/PCC_Cockpit/CockpitClient')
    include 'eclipse.project.properties'
    rename ('eclipse.project.properties','project.properties')
}

task eclipsifyCockpitClient(type: Exec, dependsOn: 'fixPropertiesCockpitClient') {
	description 'ant eclipsify local CockpitClient' 
    workingDir 'build/PCC_Cockpit/CockpitClient'
    commandLine "${antLocation}" , 'eclipse'
}

task fixPropertiesSharedResourcesCockpit(type: Copy,dependsOn: 'updateVersion') {							
    from('build/PCC_Cockpit/SharedResourcesCockpit')
    into('build/PCC_Cockpit/SharedResourcesCockpit')
    include 'eclipse.project.properties'
    rename ('eclipse.project.properties','project.properties')
}

task eclipsifySharedResourcesCockpit(type: Exec, dependsOn: 'fixPropertiesSharedResourcesCockpit') {
	description 'ant eclipsify local SharedResourcesCockpit' 
    workingDir 'build/PCC_Cockpit/SharedResourcesCockpit'
    commandLine "${antLocation}" , 'eclipse'
}

task buildCloudZip(dependsOn: [ 'eclipsify'] ) {
    description 'placeholder for end goal'
}

task createTags(dependsOn: ['createTagPSSM_PCC_Shared','createTagPSSM_PCC_Account','createTagPSSM_PCC_Environment','createTagSDK_PCC_PCIS_Service','createTagSDK_PCC_PCIS_Client','createTagPCC_Cockpit']) {
}

task createTagPSSM_PCC_Shared(type: Exec, dependsOn: 'updateVersion') { 
    description 'Tag local PSSM_PCC_Shared' 
    workingDir 'build/PSSM_PCC_Shared'
    commandLine 'git', 'tag', '-a' , cloudZipVersion ,'-m' , 'Release of cloudZipVersion' + cloudZipVersion 
}

task createTagPSSM_PCC_Account(type: Exec, dependsOn: 'updateVersion') { 
    description 'Tag local PSSM_PCC_Account' 
    workingDir 'build/PSSM_PCC_Account'
    commandLine 'git', 'tag', '-a' , cloudZipVersion ,'-m' , 'Release of cloudZipVersion' + cloudZipVersion
}

task createTagPSSM_PCC_Environment(type: Exec, dependsOn: 'updateVersion') { 
    description 'Tag local PSSM_PCC_Environment' 
    workingDir 'build/PSSM_PCC_Environment'
	commandLine 'git', 'tag', '-a' , cloudZipVersion ,'-m' , 'Release of cloudZipVersion' + cloudZipVersion
}

task createTagSDK_PCC_PCIS_Service(type: Exec, dependsOn: 'updateVersion') { 
    description 'Tag local SDK_PCC_PCIS_Service' 
    workingDir 'build/SDK_PCC_PCIS_Service'
    commandLine 'git', 'tag', '-a' , cloudZipVersion ,'-m' , 'Release of cloudZipVersion' + cloudZipVersion 
}

task createTagSDK_PCC_PCIS_Client(type: Exec, dependsOn: 'updateVersion') { 
    description 'Tag local SDK_PCC_PCIS_Client' 
    workingDir 'build/SDK_PCC_PCIS_Client'
    commandLine 'git', 'tag', '-a' , cloudZipVersion ,'-m' , 'Release of cloudZipVersion' + cloudZipVersion
}

task createTagPCC_Cockpit(type: Exec, dependsOn: 'updateVersion') { 
    description 'Tag local PCC_Cockpit' 
    workingDir 'build/PCC_Cockpit'
    commandLine 'git', 'tag', '-a' , cloudZipVersion ,'-m' , 'Release of cloudZipVersion' + cloudZipVersion
}

task pushNewVersionToOriginPSSM_PCC_Shared(type:Exec,dependsOn: 'updateVersion') {
    description 'Pushing PSSM_PCC_Shared GitHub'
    workingDir 'build/PSSM_PCC_Shared'
    commandLine 'git', 'push', 'origin', 'master'
}

task pushNewVersionToOriginPSSM_PCC_Account(type:Exec,dependsOn: 'updateVersion') {
    description 'Pushing PSSM_PCC_Account GitHub'
    workingDir 'build/PSSM_PCC_Account'
    commandLine 'git', 'push', 'origin', 'master'
}

task pushNewVersionToOriginPSSM_PCC_Environment(type:Exec,dependsOn: 'updateVersion') {
    description 'Pushing PSSM_PCC_Environment GitHub'
    workingDir 'build/PSSM_PCC_Environment'
    commandLine 'git', 'push', 'origin', 'master'
}

task pushNewVersionToOriginSDK_PCC_PCIS_Service(type: Exec, dependsOn: 'updateVersion') { 
    description 'Pushing SDK_PCC_PCIS_Service' 
    workingDir 'build/SDK_PCC_PCIS_Service'
    commandLine 'git', 'tag', '-a' , cloudZipVersion ,'-m' , 'Release of cloudZipVersion' + cloudZipVersion 
}

task pushNewVersionToOriginSDK_PCC_PCIS_Client(type: Exec, dependsOn: 'updateVersion') { 
    description 'Pushing SDK_PCC_PCIS_Client' 
    workingDir 'build/SDK_PCC_PCIS_Client'
    commandLine 'git', 'tag', '-a' , cloudZipVersion ,'-m' , 'Release of cloudZipVersion' + cloudZipVersion
}

task pushNewVersionToOriginPCC_Cockpit(type: Exec, dependsOn: 'updateVersion') { 
    description 'Pushing PCC_Cockpit' 
    workingDir 'build/PCC_Cockpit'
    commandLine 'git', 'tag', '-a' , cloudZipVersion ,'-m' , 'Release of cloudZipVersion' + cloudZipVersion
}




// ------------------------ setup test -----------------------------------
task buildDockerCloudImage(type: Exec) {
    workingDir 'dockerFiles/cloudimage/'
    commandLine 'docker', 'build', '-t', 'planon_CouldImage:0.1', '.'
}

task runDockerCloudImage(type: Exec, dependsOn: 'buildDockerCloudImage') {
    commandLine 'docker', 'run',  '-p', '18080:8080', '--name', 'cloudimage01',  '-i', '-t', 'planon_CouldImage:0.1'
}

task stopDockerCloudImage(type: Exec) {
    commandLine 'docker', 'stop', 'cloudimage01'
}

task removeDockerCloudImage(type: Exec,dependsOn: 'stopJenkins') {
    commandLine 'docker', 'rm', 'cloudimage01'
}


task checkInternet() {
    doLast {
        if (checkInternetConnection()) {
            System.out.println("true");
        } else {
            System.out.println("false");
            //throw new GradleException('no internet connection might be proxy settings')
        }
        if (checkInternetConnectionProxy()) {
            System.out.println("true proxy");
        } else {
            System.out.println("false proxy");
            throw new GradleException('proxy no internet connection might be proxy settings')
        }
    }
}

def checkInternetConnection() {
    int timeout = 1500;
    try {
        return InetAddress.getByName("www.nl.cx").isReachable(timeout)
    } catch (Exception e) {
        System.out.println("Unknown Host: " + e);
    }
    return false;
}

def checkInternetConnectionProxy() {
    int timeout = 1500;
    try {
        System.setProperty("https.proxyHost", "10.12.9.101");
        System.setProperty("https.proxyPort", "8080");
        return InetAddress.getByName("www.nl.cx").isReachable(timeout)
    } catch (Exception e) {
        System.out.println("Unknown Host: " + e);
    }
    return false;
}


